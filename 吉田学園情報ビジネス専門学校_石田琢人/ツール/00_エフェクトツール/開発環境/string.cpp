//=============================================================================
//
// 文字表示処理 [string.cpp]
// Author : TAKUTO ISHIDA
//
//=============================================================================
#include "string.h"

//=============================================================================
// マクロ定義
//=============================================================================
#define NUM_FONT	(1)		// 文字列フォントの数

//=============================================================================
// プロトタイプ宣言
//=============================================================================

//=============================================================================
// グローバル変数宣言
//=============================================================================
LPD3DXFONT	g_pFont[NUM_FONT] = {};		// フォントへのポインタ

//=============================================================================
// 初期化処理
//=============================================================================
void InitString(void)
{
	LPDIRECT3DDEVICE9 pDevice = GetDevice();

	// 文字列フォントの初期化
	D3DXCreateFont(pDevice,
		18,                     // 文字高さ
		8,                      // 文字幅
		FW_NORMAL,              // フォントスタイル(太さ)
		NULL,                   // ミップマップモデルの数
		FALSE,                  // 斜体にするかどうか
		SHIFTJIS_CHARSET,       // 文字セット(言語)
		OUT_DEFAULT_PRECIS,
		PROOF_QUALITY,
		FIXED_PITCH | FF_MODERN,
		"tahoma",               //フォントの種類
		&g_pFont[0]);
}

//=============================================================================
// 終了処理
//=============================================================================
void UninitString(void)
{
	for (int nCntString = 0; nCntString < NUM_FONT; nCntString++)
	{// 開放
		if (NULL != g_pFont[nCntString])
		{
			g_pFont[nCntString]->Release();
			g_pFont[nCntString] = NULL;
		}
	}
}

//=============================================================================
// 更新処理
//=============================================================================
void UpdateString(void)
{
}

//=============================================================================
// 描画処理
//=============================================================================
void DrawString(void)
{
}

//=============================================================================
// 文字列の設定
//=============================================================================
void SetString(char *str, RECT rect, int nFont, D3DXCOLOR col)
{
	/***********************************************************
	*
	*	必ず「描画処理」で呼んでください
	*
	************************************************************/

	//文字列サイズを計算
	g_pFont[nFont]->DrawText(
		NULL,
		&str[0],		// 表示する文字列
		-1,				// 表示サイズ(-1で全部)
		&rect,			// 表示範囲
		DT_CALCRECT,	// 表示範囲に調整
		NULL);			// 色

	//そのサイズでレンダリング
	g_pFont[nFont]->DrawText(
		NULL,
		&str[0],				// 表示する文字列
		-1,						//表示サイズ(-1で全部)
		&rect,					//表示範囲
		DT_LEFT | DT_BOTTOM,	//左詰めで両端揃え
		col);					//色
}
